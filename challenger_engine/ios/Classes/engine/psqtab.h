/*
Challenger, a UCI chess playing engine derived from Stockfish

Copyright (C) 2013-2017 grefen

Challenger is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Challenger is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef PSQTAB_H_INCLUDED
#define PSQTAB_H_INCLUDED

#include "types.h"

#define S(mg, eg) make_score(mg, eg)


/// PSQT[PieceType][Square] contains Piece-Square scores. For each piece type on
/// a given square a (midgame, endgame) score pair is assigned. PSQT is defined
/// for white side, for black side the tables are symmetric.
//PAWN, BISHOP, ADVISOR, KNIGHT, CANNON, ROOK, KING
#if 1
static Score PSQT[PIECE_TYPE_NB][SQUARE_NB] = {
	{ },
	{ // Pawn
		S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S(0 , 8), S( 0, 0), S(-14,8), S( 0, 0), S(20,8),  S( 0, 0), S(-14,8), S(  0, 0), S(  0, 8),
			S(0,  8), S( 0, 0), S( 0, 8), S( 0, 0), S(20,8),  S( 0, 0), S( 0, 8), S(  0, 0), S(  0, 8),

			S( 4,8),  S( 4,8), S( 9,8), S(14,8), S(20,8), S(14,8), S( 9,8), S( 4,8),  S( 4,8),
			S( 4,8),  S( 9,8), S(14,8), S(14,8), S(24,8), S(14,8), S(14,8), S( 9,8),  S( 4,8),
			S( 4,8),  S( 9,8), S(14,8), S(17,8), S(24,8), S(17,8), S(14,8), S( 9,8),  S( 4,8),
			S(-20,8), S( 9,8), S(17,8), S(24,8), S(34,8), S(24,8), S(17,8), S( 9,8),  S(-20,8),
			S(-30,-18), S(-16,-18), S( 0,-18), S( 0,-8), S( 0,-8), S( 0,-8), S( 0,-18), S(-16,-18 ), S(-30,-18)
	},
	{//BISHOP
		S(  0, 0), S( 0, 0), S(12,  0), S( 0, 0), S(0,  0), S( 0, 0), S( 12, 0), S(  0, 0), S(  0, 0),
			S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S(8, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(17, 4), S( 0, 0), S( 0, 0), S(  0, 0), S( 8,0),
			S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S(  0, 0), S( 0, 0), S(8, 0), S( 0, 0), S(0,  0), S( 0, 0), S(8, 0), S(  0, 0), S(  0, 0),

			S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
			S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0)
		},

		{//ADVISOR
			S(  0, 0), S( 0, 0), S( 0, 0), S(8,  0), S(0,  0), S(8,  0), S( 0, 0), S(  0, 0), S(  0, 0),
				S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(17, 0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
				S(  0, 0), S( 0, 0), S( 0, 0), S(-8, 0), S(0,  0), S(-8, 0), S( 0, 0), S(  0, 0), S(  0, 0),
				S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
				S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),

				S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
				S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
				S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
				S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
				S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0)
		},

		{//KNIGHT
			S(-135,-104), S(-107,-79), S(-80,-55), S(-25,-17), S(-67,-42),   S(-25,-17), S(-80,-55), S(-107,-79), S(-135,-104),
				S( -93, -79), S( -67,-55), S(-53, -55), S(-15,-17), S(-193,-104), S(-15,-17), S(-53, -55), S( -67,-55), S( -93, -79),
				S( -23, -55), S( -25,-30), S(  1, -6), S(  1, -6), S(-25,-17),   S(  1, -6), S(  1, -6), S( -25,-30), S( -23, -55),
				S( -25, -42), S(   1,-17), S(  1,-17), S(  1,-17), S( 27,  5),   S(  1,-17), S(  1,-17), S(  1,-17),  S( -25, -42),
				S( -25, -42), S( 13,  5),  S( 27,  5), S( 27,  5), S( 27,  5),   S( 27,  5), S( 27,  5), S( 13,  5),  S( -25, -42),

				S( -11, -42), S( 27,  5), S( 27,  5),  S(27,  5),  S(41,18),   S( 27,  5), S( 27,  5), S( 27,  5),  S( -11, -42),
				S(  13,-30),  S(41,  18), S( 27,  5),  S(41, 18),  S( 27,  5), S( 41,18),  S( 27,  5), S( 41, 18),  S(  13, -30),
				S(  13,-30),  S( 27,  5), S( 27,  5),  S(45 ,18),  S( 27,  5), S( 45,18),  S( 27,  5), S( 27,  5),  S(  13, -30),
				S(  13,-30),  S( 27,  5), S( 45, 18),  S( 27,  5), S( 27,  5), S( 27,  5), S( 45, 18), S( 27,  5),  S(  13, -30),
				S(  13,-30),  S( 13,-17), S(  13,-17), S( 13,  5), S( 13,  5), S( 13,  5), S( 13,-17), S(  13,-17), S(  13, -30)
			},

			{//CANNON
				S(8,-8),  S(8,-6), S(8,-6), S(8, 18), S(8, 16), S(8, 18), S(8,-6), S( 8,-6), S(8,-8),
					S(8,-6),  S(8,-6), S(8,-6), S(8, 18), S(8, 16), S(8, 18), S(8,-6), S( 8,-6), S(8,-6),
					S(8,-6),  S(8, -6),S(18, 16),S(18, 16),S(28, 18),S(18, 16), S(18,  6), S(8, -6), S(8,-6),
					S(8,-6), S(8, -6), S(8, -6), S(8, 18), S(18, 18), S(8, 18), S(8, -6), S(8, -6), S(8,-6),
					S(-8,-6), S(8, -6), S(-8, -6), S(-8, 18), S(18, 18), S(-8, 18), S(-8, -6), S(8, -6), S(-8,-6),

					S(8,-6), S(8, -6), S(8, -6), S(8,  -6), S(28, 18), S(8,  -6), S(8, -6), S( 8, -6), S(8,-6),
					S(8, -6), S(8, -6), S(8, -6), S(8,  -6), S(28, 18), S(8,  -6), S(8, -6), S( 8,  -6), S(8, -6),
					S(8,  6),  S(8,  6), S(8, -6), S(8,-18), S(8,-30), S(8,-18), S(8, -6), S(8,  6),  S(8,  6),
					S(8,  6),  S(8,  6), S(8, -6), S(8,-30), S(8,-30), S(8,-30), S(8, -6), S(8,  6),  S(8,  6),
					S(8, 18),  S(8, 18), S(8,  6), S(8,-30), S(8,-30), S(8,-30), S(8,  6), S(8, 18),  S(8, 18)
			},
			{//ROOK
				S(-12, 3), S(10, 3), S(6, 3), S(10, 3), S(2, 3), S(10, 3), S(6, 3), S(10, 3), S(-12, 3),
					S(6, 3), S(11, 3), S(6, 3), S(12, 3),  S(2, 3), S(12, 3), S(6, 3), S(11, 3), S(6, 3),
					S(7, 3), S(12, 3), S(6, 3), S(12, 3), S(2, 3), S(12, 3), S(6, 3), S(12, 3), S(7, 3),
					S(7, 3), S(13, 3), S(6, 3), S(12, 3), S(2, 3), S(12, 3), S(6, 3), S(13, 3), S(7, 3),
					S(7, 3), S(17, 3), S(17, 3), S(17, 3), S(17, 3), S(17, 3), S(17, 3), S(17, 3), S(7, 3),

					S(7, 3), S(15, 3), S(15, 3), S(16, 3), S(16, 3), S(16, 3), S(15, 3), S(15, 3), S(7, 3),
					S(7, 3), S(17, 3), S(22, 3), S(22, 3), S(22, 3), S(22, 3), S(22, 3), S(17, 3), S(7, 3),
					S(7, 3), S(12, 3), S(10, 3), S(12, 3), S(12, 3), S(12, 3), S(12, 3), S(12, 3), S(7, 3),
					S(7, 3), S(15, 3), S(12, 3), S(12, 3), S(62, 3), S(12, 3), S(12, 3), S(15, 3), S(7, 3),
					S(7, 3), S(12, 3), S(12, 3), S(42, 3), S(52, 3), S(42, 3), S(12, 3), S(12, 3), S(7, 3)
				},
				{//KING
					S(  0, 0), S( 0, 0), S( 0, 0), S(287,222), S(287,222), S(287,222), S( 0, 0), S(  0, 0), S(  0, 0),
						S(  0, 0), S( 0, 0), S( 0, 0), S(190,193), S(142,193), S(190,193), S( 0, 0), S(  0, 0), S(  0, 0),
						S(  0, 0), S( 0, 0), S( 0, 0), S(94, 18),  S(21,18),   S(94, 18),  S( 0, 0), S(  0, 0), S(  0, 0),
						S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0),   S(0,  0),   S( 0, 0),   S( 0, 0), S(  0, 0), S(  0, 0),
						S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0),   S(0,  0),   S( 0, 0),   S( 0, 0), S(  0, 0), S(  0, 0),

						S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
						S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
						S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
						S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
						S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0)
				}
};
#endif
#if 0

				static Score PSQT[PIECE_TYPE_NB][SQUARE_NB] = {
					{ },
					{ // Pawn
						S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S( 7, 0), S( 0, 0), S( 7, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 7, 0), S(  0, 0), S(  7, 0),
							S( 7, 0), S( 0, 0), S(13, 0), S( 0, 0), S(0,  0), S( 0, 0), S(13, 0), S(  0, 0), S(  7, 0),

							S(19, 0), S(27, 0), S(31, 0), S(44, 0), S(49,  0), S(44, 0), S(31, 0), S( 27, 0), S( 19, 0),
							S(29, 0), S(36, 0), S(39, 0), S(49, 0), S(51,  0), S(49, 0), S(39, 0), S( 36, 0), S( 29, 0),
							S(29, 0), S(39, 0), S(54, 0), S(64, 0), S(64,  0), S(64, 0), S(54, 0), S( 39, 0), S( 29, 0),
							S(29, 0), S(39, 0), S(59, 0), S(74, 0), S(79,  0), S(74, 0), S(59, 0), S( 39, 0), S( 29, 0),
							S( 9, 0), S( 9, 0), S( 9, 0), S(11, 0), S(13,  0), S(11, 0), S( 9, 0), S(  9, 0), S(  9, 0)
					},
					{//BISHOP
						S( 0, 0), S( 0, 0), S( 25,0), S( 0, 0), S(0,  0), S( 0, 0), S(25, 0), S(  0, 0), S(  0, 0),
							S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S(23, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(28, 0), S( 0, 0), S( 0, 0), S(  0, 0), S(23, 0),
							S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S( 0, 0), S( 0, 0), S(25, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 25,0), S(  0, 0), S(  0, 0),

							S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
							S(  0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0)
						},

						{//ADVISOR
							S( 0, 0), S( 0, 0), S( 0, 0), S(27, 0), S(0,  0), S(27, 0), S( 0, 0), S(  0, 0), S(  0, 0),
								S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(30, 0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
								S( 0, 0), S( 0, 0), S( 0, 0), S(27, 0), S(0,  0), S(27, 0), S( 0, 0), S(  0, 0), S(  0, 0),
								S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
								S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),

								S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
								S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
								S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
								S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
								S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0)
						},

						{//KNIGHT
							S(88, 0), S(85, 0), S(90, 0), S(88, 0), S(90,  0), S(88, 0), S(90, 0), S(85, 0), S(88, 0),
								S(85, 0), S(90, 0), S(92, 0), S(93, 0), S(78,  0), S(93, 0), S(92, 0), S(90, 0), S(85, 0),
								S(93, 0), S(92, 0), S(94, 0), S(95, 0), S(92,  0), S(95, 0), S(94, 0), S(92, 0), S(93, 0),
								S(92, 0), S(94, 0), S(98, 0), S(95, 0), S(98,  0), S(95, 0), S(98, 0), S(94, 0), S(92, 0),
								S(90, 0), S(98, 0), S(101,0), S(102,0), S(103, 0), S(102,0), S(101,0), S(98, 0), S(90, 0),

								S(90, 0), S(100, 0), S(99, 0), S(103, 0), S(104,  0),S(103, 0),S(99, 0), S(100, 0), S(90, 0),
								S(93, 0), S(108, 0), S(100, 0),S(107,0),  S(100,  0),S(107,0), S(100, 0),S(108, 0), S(93, 0),
								S(92, 0), S(98, 0),  S(99, 0), S(103, 0), S(99,  0), S(103, 0),S(99, 0), S(98, 0),  S(92, 0),
								S(90, 0), S(96, 0),  S(103, 0),S(97, 0),  S(94,  0), S(97, 0), S(103, 0),S(96, 0),  S(90, 0),
								S(90, 0), S(90, 0),  S(90, 0), S(96, 0),  S(90,  0), S(96, 0), S(90, 0), S(90, 0), S(90, 0)
							},

							{//CANNON

								S(96, 0), S( 96, 0), S(97, 0), S(99, 0), S(99,  0), S(99, 0), S( 97, 0), S(96, 0), S(96, 0),
									S(96, 0), S( 97, 0), S(98, 0), S(98, 0), S(98,  0), S(98, 0), S( 98, 0), S(97, 0), S(96, 0),
									S(97, 0), S(96, 0), S(100, 0), S(99, 0), S(101, 0), S(99, 0), S(100, 0), S(96, 0), S(97, 0),
									S(96, 0), S(96, 0), S(96, 0), S(96, 0), S(96,  0), S(96, 0), S(96, 0), S(96, 0), S(96, 0),
									S(95, 0), S(96, 0), S(99, 0), S(96, 0), S(100,  0), S(96, 0), S(99, 0), S(96, 0), S(95, 0),

									S(96, 0), S(96, 0), S(96, 0), S(96, 0), S(100, 0),S(96, 0), S(96, 0), S(96, 0), S(96, 0),
									S(96, 0), S(99, 0), S(99, 0), S(98, 0), S(100,  0), S(98, 0), S(99, 0), S(99, 0), S(96, 0),
									S(97, 0), S(97, 0), S(96, 0), S(91, 0), S(92,  0), S(91, 0), S(96, 0), S(97, 0), S(97, 0),
									S(98, 0), S(98, 0), S(96, 0), S(92, 0), S(89,  0), S(92, 0), S(96, 0), S(98, 0), S(98, 0),
									S(100, 0), S(100, 0), S(96, 0), S(91, 0), S(90,  0), S(91, 0), S(96, 0), S(100, 0), S(100, 0)
							},
							{//ROOK

								S(194, 0), S(206, 0), S(204, 0), S(212, 0), S(200,  0), S(212, 0), S(204, 0), S(206, 0), S(194, 0),
									S(200, 0), S(208, 0), S(206, 0), S(212, 0), S(200,  0), S(212, 0), S(206, 0), S(208, 0), S(200, 0),
									S(198, 0), S(208, 0), S(204, 0), S(212, 0), S(212,  0), S(212, 0), S(204, 0), S(208, 0), S(198, 0),
									S(204, 0), S(209, 0), S(204, 0), S(212, 0), S(214,  0), S(212, 0), S(204, 0), S(209, 0), S(204, 0),
									S(208, 0), S(212, 0), S(212, 0), S(214, 0), S(215,  0), S(214, 0), S(212, 0), S(212, 0), S(208, 0),


									S(208, 0), S(211, 0), S(211, 0), S(214, 0), S(215,  0), S(214, 0), S(211, 0), S(211, 0), S(208, 0),
									S(206, 0), S(213, 0), S(213, 0), S(216, 0), S(216,  0), S(216, 0), S(213, 0), S(213, 0), S(206, 0),
									S(206, 0), S(208, 0), S(207, 0), S(214, 0), S(216,  0), S(214, 0), S(207, 0), S(208, 0), S(206, 0),
									S(206, 0), S(212, 0), S(209, 0), S(216, 0), S(233,  0), S(216, 0), S(209, 0), S(212, 0), S(206, 0),
									S(206, 0), S(208, 0), S(207, 0), S(213, 0), S(214,  0), S(213, 0), S(207, 0), S(208, 0), S(206, 0)						
								},
								{//KING
									S( 0, 0), S( 0, 0), S( 0, 0), S(11, 0), S(15,  0), S(11, 0), S( 0, 0), S(  0, 0), S(  0, 0),
										S( 0, 0), S( 0, 0), S( 0, 0), S( 2, 0), S(2,  0), S( 2, 0), S( 0, 0), S(  0, 0), S(  0, 0),
										S( 0, 0), S( 0, 0), S( 0, 0), S( 1, 0), S(1,  0), S( 1, 0), S( 0, 0), S(  0, 0), S(  0, 0),
										S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
										S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),

										S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
										S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
										S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
										S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0),
										S( 0, 0), S( 0, 0), S( 0, 0), S( 0, 0), S(0,  0), S( 0, 0), S( 0, 0), S(  0, 0), S(  0, 0)
								}
				};
#endif


#undef S

#endif // #ifndef PSQTAB_H_INCLUDED
